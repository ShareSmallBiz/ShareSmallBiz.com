@using ShareSmallBiz.Portal.Infrastructure.Models
@model UserModel
@{
    ViewData["Title"] = "Chat - " + Model.UserName;
}

<div class="container-fluid px-0">
    <!-- Hero Section -->
    <section class="bg-primary text-white text-center py-4 py-md-5">
        <div class="container">
            <h1 class="fw-bold">Supercharge Your Small Business with ShareSmallBiz</h1>
            <p class="lead">Get expert advice, marketing tips, and networking opportunities with our AI-powered chat agent.</p>
            <button id="joinModalButton" class="btn btn-warning btn-lg mt-3">
                <i class="bi bi-chat-dots-fill me-2"></i> Try the Chat Agent Now
            </button>
        </div>
    </section>

    <!-- Features Section -->
    <section class="container text-center py-4 py-md-5">
        <div class="row g-4">
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body p-4">
                        <i class="bi bi-lightbulb text-primary mb-3" style="font-size: 2.5rem;"></i>
                        <h3 class="fs-4">Expert Insights</h3>
                        <p class="text-muted">Receive tailored advice to help you grow your business and increase revenue.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body p-4">
                        <i class="bi bi-megaphone text-primary mb-3" style="font-size: 2.5rem;"></i>
                        <h3 class="fs-4">Marketing Tips</h3>
                        <p class="text-muted">Boost your brand with cutting-edge marketing and digital strategies.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body p-4">
                        <i class="bi bi-people text-primary mb-3" style="font-size: 2.5rem;"></i>
                        <h3 class="fs-4">Community Support</h3>
                        <p class="text-muted">Connect with fellow entrepreneurs and share valuable resources.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Chat Modal -->
    <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="chatModalLabel">
                        <i class="bi bi-chat-square-text me-2"></i>
                        <span id="chatModalTitle">Chat</span>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close" id="closeModalBtn"></button>
                </div>
                <div class="modal-body p-0 d-flex flex-column">
                    <div id="chatContainer" class="flex-grow-1 d-flex flex-column">
                        <!-- Hidden field to store the variant name -->
                        <span id="chatVariantName" class="d-none">sharesmallbizchat</span>

                        <!-- Chat Conversation -->
                        <div id="chatConversation" class="flex-grow-1 d-flex flex-column">
                            <!-- Messages Container -->
                            <div id="chatMessages" class="flex-grow-1 p-3 overflow-auto mb-0"></div>

                            <!-- Typing Indicator -->
                            <div id="botTyping" class="d-none text-center p-2 text-muted fst-italic">
                                <div class="spinner-grow spinner-grow-sm me-1" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Bot is typing...
                            </div>

                            <!-- Message Input -->
                            <div class="p-3 border-top">
                                <div class="input-group">
                                    <input type="text" id="chatInput" class="form-control" placeholder="Type your message..." aria-label="Message">
                                    <button id="sendMessageBtn" class="btn btn-primary" type="button">
                                        <i class="bi bi-send-fill"></i>
                                        <span class="d-none d-md-inline ms-2">Send</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include SignalR and marked libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        // --------------------
        // Chat Functionality
        // --------------------
        // Set userName from the provided UserModel
        let userName = '@Model.UserName';
        // Always use "sharesmallbizchat" as the variant name
        let chatVariantName = 'sharesmallbizchat';
        let isConnecting = true;
        let streamingBuffer = '';
        let conversationId = new Date().getTime().toString();
        let connection = null;
        let streamingTimeoutRef = null;
        let isFirstChunk = true;

        // Remove any HTML tags from input
        function sanitizeInput(input) {
            var div = document.createElement('div');
            div.textContent = input;
            return div.innerHTML;
        }

        // Parse markdown using marked.js if available
        function parseMarkdown(text) {
            if (typeof marked !== 'undefined') {
                return marked.parse(text);
            }
            return text;
        }

        // Append a new message to the chat
        function addNewMessage(content, user) {
            var sanitizedContent = sanitizeInput(content);
            var chatMessages = document.getElementById('chatMessages');
            var messageRow = document.createElement('div');
            messageRow.classList.add('d-flex', 'mb-3');

            if (user === chatVariantName) {
                // Bot message
                messageRow.classList.add('justify-content-start');
                messageRow.innerHTML = `
                    <div class="d-flex align-items-start">
                        <div class="rounded-circle bg-primary text-white p-2 me-2 d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                            <i class="bi bi-robot"></i>
                        </div>
                        <div class="bg-light rounded p-3" style="max-width: 75%;">
                            <div class="small text-muted mb-1">${user} · ${new Date().toLocaleTimeString()}</div>
                            <div class="message-content">${parseMarkdown(sanitizedContent)}</div>
                        </div>
                    </div>
                `;
            } else {
                // User message
                messageRow.classList.add('justify-content-end');
                messageRow.innerHTML = `
                    <div class="d-flex align-items-start">
                        <div class="bg-primary text-white rounded p-3" style="max-width: 75%;">
                            <div class="small text-white-50 mb-1">${user} · ${new Date().toLocaleTimeString()}</div>
                            <div class="message-content">${parseMarkdown(sanitizedContent)}</div>
                        </div>
                        <div class="rounded-circle bg-warning text-dark p-2 ms-2 d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                            <i class="bi bi-person-fill"></i>
                        </div>
                    </div>
                `;
            }

            chatMessages.appendChild(messageRow);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Update the last message with new content (for streaming updates)
        function updateLastMessage(chunk) {
            var chatMessages = document.getElementById('chatMessages');
            var lastMessage = chatMessages.lastElementChild;
            if (lastMessage) {
                var contentSpan = lastMessage.querySelector('.message-content');
                if (contentSpan) {
                    contentSpan.innerHTML += parseMarkdown(sanitizeInput(chunk));
                }
            }
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Handle incoming messages from the SignalR hub
        function handleReceiveMessage(user, messageChunk) {
            if (user === chatVariantName) {
                document.getElementById('botTyping').classList.remove('d-none');
                document.getElementById('botTyping').classList.add('d-flex');
                streamingBuffer += sanitizeInput(messageChunk);
                if (streamingTimeoutRef) clearTimeout(streamingTimeoutRef);
                if (isFirstChunk) {
                    addNewMessage(messageChunk, user);
                    isFirstChunk = false;
                } else {
                    updateLastMessage(messageChunk);
                }
                streamingTimeoutRef = setTimeout(function(){
                    isFirstChunk = true;
                    streamingBuffer = '';
                    document.getElementById('botTyping').classList.add('d-none');
                    document.getElementById('botTyping').classList.remove('d-flex');
                }, 1000);
            } else {
                addNewMessage(messageChunk, user);
            }
        }

        // Initialize the SignalR chat connection
        function initChatConnection() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl('https://webspark.markhazleton.com/chatHub')
                .build();
            connection.start().then(function(){
                isConnecting = false;
                console.log('Connected to SignalR hub');

                // Add a welcome message to the chat
                setTimeout(function() {
                    handleReceiveMessage(chatVariantName, "👋 Welcome to ShareSmallBiz! How can I help with your business today?");
                }, 1000);

            }).catch(function(error){
                console.error('SignalR connection failed:', error);
                isConnecting = false;
            });
            connection.on('ReceiveMessage', handleReceiveMessage);
        }

        // Handle sending a message from the chat input
        function handleSendMessage() {
            var chatInputField = document.getElementById('chatInput');
            if (userName && chatInputField && chatInputField.value.trim() !== '') {
                var message = chatInputField.value.trim();
                if (connection) {
                    connection.invoke('SendMessage', userName, message, conversationId, chatVariantName)
                        .catch(function(err){ console.error(err); });
                }
                chatInputField.value = '';
            }
        }

        // Set up event listeners for chat once the DOM is ready
        document.addEventListener('DOMContentLoaded', function(){
            var joinModalButton = document.getElementById('joinModalButton');
            joinModalButton.addEventListener('click', function() {
                document.getElementById('chatModalTitle').textContent = 'Chat with ShareSmallBiz';
                var chatModal = new bootstrap.Modal(document.getElementById('chatModal'));
                chatModal.show();
            });

            var chatModal = document.getElementById('chatModal');
            chatModal.addEventListener('shown.bs.modal', function(){
                // Initialize connection on first modal open if not already connected
                if (!connection) {
                    initChatConnection();
                }

                // Focus on the input field
                document.getElementById('chatInput').focus();

                // Scroll chat to bottom
                var chatMessages = document.getElementById('chatMessages');
                chatMessages.scrollTop = chatMessages.scrollHeight;
            });

            document.getElementById('sendMessageBtn').addEventListener('click', handleSendMessage);

            document.getElementById('chatInput').addEventListener('keydown', function(e){
                if (e.key === 'Enter') {
                    e.preventDefault();
                    handleSendMessage();
                }
            });
        });
    </script>
}