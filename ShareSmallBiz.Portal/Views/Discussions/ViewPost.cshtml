@model DiscussionModel
@using Microsoft.AspNetCore.Identity
@using ShareSmallBiz.Portal.Data.Entities
@using ShareSmallBiz.Portal.Infrastructure.Models
@inject SignInManager<ShareSmallBizUser> SignInManager
@inject UserManager<ShareSmallBizUser> UserManager

@{
    ViewData["Title"] = Model.Title;
    var currentUserId = UserManager.GetUserId(User);
    var currentUserName = User.Identity.IsAuthenticated ? User.Identity.Name : "";
}

<article>
    <div class="card border-0" itemscope itemtype="http://schema.org/Article">
        <meta itemprop="headline" content="@Model.Title" />
        <meta itemprop="datePublished" content="@Model.Published.ToString("yyyy-MM-dd")" />
        @if (!string.IsNullOrEmpty(Model.Cover) && Model.Cover != "https://sharesmallbiz.com/")
        {
            <div class="card-header p-0 position-relative overflow-hidden" style="height: 50vh;">
                <img src="@Model.Cover"
                     class="img-fluid w-100 h-100 object-fit-cover"
                     alt="@Model.Title"
                     title="@Model.Cover"
                     loading="lazy"
                     itemprop="image" />
                <!-- Overlay Content -->
                <div class="position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-end bg-dark bg-opacity-50 p-3 text-white">
                    <h1 class="card-title h4 text-center mb-2" itemprop="headline">@Model.Title</h1>
                    <p class="text-center small mb-2">
                        @if (Model?.Creator?.ProfilePictureUrl != null)
                        {
                            <img class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover;"
                                 src="@Model?.Creator?.ProfilePictureUrl" alt="User Profile" />
                        }
                        else
                        {
                            <i class="bi bi-person-circle"></i>
                        }
                        <span itemprop="author" itemscope itemtype="http://schema.org/Person">
                            <meta itemprop="name" content="@(Model?.Creator?.UserName ?? "Unknown Creator")" />
                            <strong>
                                @if (!string.IsNullOrEmpty(Model?.Creator?.UserName))
                                {
                                    <a href="/profiles/@Model.Creator.UserName" itemprop="url" class="text-white text-decoration-underline">
                                        @(Model.Creator.UserName)
                                    </a>
                                }
                                else
                                {
                                    @:Unknown Author
                                }
                            </strong>
                        </span>
                    </p>
                </div>
            </div>
        }
        else
        {
            <div class="card-header py-3 ">
                <h1 class="card-title text-center mb-2" itemprop="headline">@Model.Title</h1>
                <p class="text-center small mb-2">
                    @if (Model?.Creator?.ProfilePictureUrl != null)
                    {
                        <img class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover;"
                             src="@Model?.Creator?.ProfilePictureUrl" alt="User Profile" />
                    }
                    else
                    {
                        <i class="bi bi-person-circle"></i>
                    }
                    <span itemprop="author" itemscope itemtype="http://schema.org/Person">
                        <meta itemprop="name" content="@(Model?.Creator?.UserName ?? "Unknown Creator")" />
                        <strong>
                            @if (!string.IsNullOrEmpty(Model?.Creator?.UserName))
                            {
                                <a href="/profiles/@Model.Creator.UserName" itemprop="url" class="text-decoration-underline">
                                    @(Model.Creator.UserName)
                                </a>
                            }
                            else
                            {
                                @:Unknown Author
                            }
                        </strong>
                    </span>
                </p>
            </div>
        }

        <div class="card-body">
            <p class="text-center small mb-0">
                <i class="bi bi-eye"></i> <span itemprop="interactionCount">@Model.PostViews views</span>
                &nbsp;|&nbsp;
                <i class="bi bi-calendar"></i>
                <time datetime="@Model.Published.ToString("yyyy-MM-dd")" itemprop="datePublished">
                    @Model.Published.ToString("MMM d, yyyy")
                </time>
            </p>
            <div class="d-flex justify-content-center flex-wrap gap-1 mt-2">
                @foreach (var tag in Model.Tags)
                {
                    <a class="badge bg-info text-dark text-decoration-none" href="/discussions/tag/@tag">#@tag</a>
                }
            </div>
            <!-- Edit Post Link (Only for Author) -->
            @if (SignInManager.IsSignedIn(User) && Model.Creator.Id == currentUserId)
            {
                <div class="text-end">
                    <a href="/Forum/Post/Edit/@Model.Id" class="btn btn-outline-secondary">
                        <i class="bi bi-pencil"></i> Edit Post
                    </a>
                </div>
            }

            <hr />

            <!-- Post Content -->
            <div class="post-content" itemprop="articleBody">
                @Html.Raw(Model.Content)
            </div>

            <section class="container-fluid px-0">
                <div class="px-3 py-4 border-top">

                    <!-- Comments Header -->
                    <h2 class="h5 mb-4 d-flex align-items-center gap-2">
                        <i class="bi bi-chat-dots"></i> Comments
                    </h2>

                    <!-- Comment List -->
                    <div id="commentsList" class="list-group mb-4">
                        @Html.Partial("_CommentsPartial", Model.Comments)
                    </div>

                    <!-- Add Comment -->
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div id="addCommentSection" class="mb-4">
                            <div class="mb-3">
                                <textarea id="newCommentText" class="form-control" rows="3" placeholder="Add a comment"></textarea>
                            </div>
                            <button id="addCommentButton" data-post-id="@Model.Id" class="btn btn-primary w-100">
                                <i class="bi bi-plus-lg"></i> Add Comment
                            </button>
                        </div>
                    }

                    <!-- Guest CTA -->
                    @if (!SignInManager.IsSignedIn(User))
                    {
                        <div class="alert alert-info text-center mt-4">
                            <p class="fw-bold">Want to join the conversation?</p>
                            <div class="d-flex flex-column gap-2">
                                <a href="/Identity/Account/Login" class="btn btn-primary w-100">
                                    <i class="bi bi-box-arrow-in-right"></i> Log In
                                </a>
                                <a href="/Identity/Account/Register" class="btn btn-success w-100">
                                    <i class="bi bi-person-plus-fill"></i> Sign Up
                                </a>
                            </div>
                            <small class="d-block mt-2 text-muted">to like and comment.</small>
                        </div>
                    }

                </div>
            </section>
        </div>
    </div>
</article>

<div>
    <div>
        <br />
        <br />
        <br />
        <hr />
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var currentUserName = '@currentUserName';

            // Handler for adding a comment
            $("#addCommentButton").click(function () {
                var postId = $(this).data("post-id");
                var commentText = $("#newCommentText").val();
                $.ajax({
                    url: '/discussions/' + postId + '/comment',
                    method: 'POST',
                    data: { comment: commentText },
                    success: function (response) {
                        $("#commentsList").html(response);
                        $("#newCommentText").val('');
                    },
                    error: function () {
                        alert("Error adding comment.");
                    }
                });
            });

            // Delegate click event for deleting a comment
            $("#commentsList").on("click", ".delete-comment", function () {
                var commentId = $(this).data("comment-id");
                var postId = @Model.Id;
                $.ajax({
                    url: '/discussions/' + postId + '/comment/' + commentId,
                    method: 'DELETE',
                    success: function (response) {
                        $("#commentsList").html(response);
                    },
                    error: function () {
                        alert("Error deleting comment.");
                    }
                });
            });
        });
    </script>
}
