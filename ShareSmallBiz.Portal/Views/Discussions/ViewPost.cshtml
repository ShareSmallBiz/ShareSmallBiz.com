@model DiscussionModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ShareSmallBizUser> SignInManager
@inject UserManager<ShareSmallBizUser> UserManager

@{
    ViewData["Title"] = Model.Title;
    var currentUserId = UserManager.GetUserId(User);
    var currentUserName = User.Identity.IsAuthenticated ? User.Identity.Name : "";
}

<div class="container-fluid px-3 px-md-5 my-3">
    <article class="card shadow-lg border-0" itemscope itemtype="http://schema.org/Article">
        <meta itemprop="headline" content="@Model.Title" />
        <meta itemprop="datePublished" content="@Model.Published.ToString("yyyy-MM-dd")" />
        <div class="card-body">
            <!-- Cover Image -->
            @if (!string.IsNullOrEmpty(Model.Cover) && Model.Cover != "https://sharesmallbiz.com/")
            {
                <figure class="cover-container mb-3 text-center">
                    <img src="@Model.Cover"
                         class="img-fluid cover-image rounded shadow-sm lazyload mx-auto d-block"
                         alt="@Model.Title"
                         title="@Model.Cover"
                         loading="lazy"
                         style="max-height: 50vh; object-fit: cover;"
                         itemprop="image" />
                </figure>
            }

            <!-- Post Header -->
            <header>
                <h1 class="card-title text-center" itemprop="headline">@Model.Title</h1>
                <p class="text-muted text-center">
                    @if (Model?.Author?.ProfilePicture != null)
                    {
                        <img class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;"
                             src="data:image/*;base64,@(Convert.ToBase64String(Model.Author.ProfilePicture))" alt="User Profile" />
                    }
                    else
                    {
                        <i class="bi bi-person-circle"></i>
                    }
                    <span itemprop="author" itemscope itemtype="http://schema.org/Person">
                        <meta itemprop="name" content="@(Model?.Author?.UserName ?? "Unknown Author")" />
                        <strong>
                            @if (!string.IsNullOrEmpty(Model?.Author?.UserName))
                            {
                                <a href="/profiles/@Model.Author.UserName" itemprop="url">
                                    @(Model.Author.UserName)
                                </a>
                            }
                            else
                            {
                                @:Unknown Author
                            }
                        </strong>
                    </span>
                    | <i class="bi bi-eye"></i> <span itemprop="interactionCount">@(Model.PostViews) views</span>
                    | <i class="bi bi-calendar"></i>
                    <time datetime="@Model.Published.ToString("yyyy-MM-dd")" itemprop="datePublished">
                        @Model.Published.ToString("MMM d, yyyy")
                    </time>
                </p>
            </header>

            <!-- Edit Post Link (Only for Author) -->
            @if (SignInManager.IsSignedIn(User) && Model.Author.Id == currentUserId)
            {
                <div class="text-end">
                    <a href="/Forum/Post/Edit/@Model.Id" class="btn btn-outline-secondary">
                        <i class="bi bi-pencil"></i> Edit Post
                    </a>
                </div>
            }

            <hr />

            <!-- Post Content -->
            <div class="post-content" itemprop="articleBody">
                @Html.Raw(Model.Content)
            </div>
        </div>
    </article>

    <!-- Comments Section -->
    <section class="card shadow-sm border-0 p-3 mb-4">
        <div class="card-header">
            <i class="bi bi-chat-dots"></i> Comments
        </div>
        <div class="card-body">
            <div id="commentsList" class="list-group">
                @Html.Partial("_CommentsPartial", Model.Comments)
            </div>

            @if (User.Identity.IsAuthenticated)
            {
                <div id="addCommentSection" class="mt-3">
                    <div class="mb-3">
                        <textarea id="newCommentText" class="form-control" rows="3" placeholder="Add a comment"></textarea>
                    </div>
                    <button id="addCommentButton" data-post-id="@Model.Id" class="btn btn-primary">
                        <i class="bi bi-plus-lg"></i> Add Comment
                    </button>
                </div>
            }
        </div>

        <hr />

        @if (!SignInManager.IsSignedIn(User))
        {
            <div class="alert alert-info text-center mt-3">
                <p><strong>Want to join the conversation?</strong></p>
                <p>
                    <a href="/Identity/Account/Login" class="btn btn-primary">
                        <i class="bi bi-box-arrow-in-right"></i> Log In
                    </a>
                    or
                    <a href="/Identity/Account/Register" class="btn btn-success">
                        <i class="bi bi-person-plus-fill"></i> Sign Up
                    </a>
                    to like and comment.
                </p>
            </div>
        }
    </section>
</div>

<section>
    <div class="text-center">
        <br />
        <br />
        <br />
        <hr />
    </div>
</section>

@section Scripts {
    <script>
        $(document).ready(function () {
            var currentUserName = '@currentUserName';

            // Handler for adding a comment
            $("#addCommentButton").click(function () {
                var postId = $(this).data("post-id");
                var commentText = $("#newCommentText").val();
                $.ajax({
                    url: '/post/' + postId + '/comment',
                    method: 'POST',
                    data: { comment: commentText },
                    success: function (response) {
                        $("#commentsList").html(response);
                        $("#newCommentText").val('');
                    },
                    error: function () {
                        alert("Error adding comment.");
                    }
                });
            });

            // Delegate click event for deleting a comment
            $("#commentsContainer").on("click", ".delete-comment", function () {
                var commentId = $(this).data("comment-id");
                var postId = @Model.Id;
                $.ajax({
                    url: '/post/' + postId + '/comment/' + commentId,
                    method: 'DELETE',
                    success: function (response) {
                        $("#commentsList").html(response);
                    },
                    error: function () {
                        alert("Error deleting comment.");
                    }
                });
            });
        });
    </script>
}
