@using System.IO
@using System.Text.Json
@using Microsoft.Extensions.Caching.Memory
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment
@inject Microsoft.Extensions.Caching.Memory.IMemoryCache Cache

@{
    // Extract route data safely with null checks
    var area = ViewContext.RouteData.Values["area"]?.ToString() ?? string.Empty;
    var controller = ViewContext.RouteData.Values["controller"]?.ToString() ?? string.Empty;
    var action = ViewContext.RouteData.Values["action"]?.ToString() ?? string.Empty;

    // Build paths correctly
    var currentPath = $"/{area}/{controller}/{action}".ToLower();
    var currentArea = $"/{area}".ToLower();

    // Determine the JSON file path based on area
    var jsonFile = !string.IsNullOrEmpty(area)
        ? System.IO.Path.Combine(Environment.ContentRootPath, "Areas", area, "Views", "Shared", "navigation.json")
        : System.IO.Path.Combine(Environment.ContentRootPath, "Views", "Shared", "navigation.json");

    string areaHome = !string.IsNullOrEmpty(area) ? $"/{area}/home" : "/home";

    // Use caching to improve performance
    var cacheKey = $"navigation-{area}";
    JsonDocument menuItems = null;

    if (!Cache.TryGetValue(cacheKey, out menuItems))
    {
        if (File.Exists(jsonFile))
        {
            try
            {
                string json = File.ReadAllText(jsonFile);
                menuItems = JsonDocument.Parse(json);

                // Cache the navigation for 30 minutes
                var cacheOptions = new Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(30));

                Cache.Set(cacheKey, menuItems, cacheOptions);
            }
            catch (Exception ex)
            {
                // Log the error or handle it as needed
                // _logger.LogError(ex, "Error reading navigation JSON");
            }
        }
    }
}

@if (menuItems != null)
{
    <nav aria-label="Main Navigation" role="navigation">
        <div class="navbar navbar-expand-lg navbar-dark bg-secondary mb-4">
            <div class="container-fluid">
                <!-- Logo & Brand -->
                <a class="navbar-brand d-flex align-items-center" href="/">
                    <img src="~/img/ShareSmallBiz.png" alt="ShareSmallBiz Logo" class="img-fluid" style="height: 40px;" aria-hidden="true">
                    <span class="ms-2">ShareSmallBiz</span>
                </a>

                <!-- Toggler Button -->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                        data-bs-target="#navbarNav5" aria-controls="navbarNav5"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <!-- Navbar Links -->
                <div class="collapse navbar-collapse" id="navbarNav5">
                    <ul class="navbar-nav">
                        @try
                        {
                            @foreach (var item in menuItems.RootElement.GetProperty("menuItems").EnumerateArray())
                            {
                                // Get menu item properties with defaults
                                string role = "anonymous"; // Default role
                                if (item.TryGetProperty("role", out var roleElement))
                                {
                                    role = roleElement.GetString();
                                }

                                string icon = "bi bi-house-door"; // Default icon
                                if (item.TryGetProperty("icon", out var iconElement))
                                {
                                    icon = iconElement.GetString();
                                }

                                // Check if this item has children (for dropdowns)
                                bool hasDropdown = item.TryGetProperty("children", out var childrenElement) &&
                                childrenElement.ValueKind == JsonValueKind.Array &&
                                childrenElement.GetArrayLength() > 0;

                                // Get the URL and text
                                var url = item.GetProperty("url").GetString().ToLower();
                                var text = item.GetProperty("text").GetString();

                                // Determine if this item is active
                                var isActive = currentPath.StartsWith(url, StringComparison.OrdinalIgnoreCase);

                                // Determine if we should show this menu item based on role
                                bool shouldShow = (role == "anonymous") ||
                                (role == "admin" && User.Identity.IsAuthenticated && User.IsInRole("Admin")) ||
                                (role == "user" && User.Identity.IsAuthenticated);

                                if (shouldShow)
                                {
                                    if (hasDropdown)
                                    {
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle @(isActive ? "active" : "")"
                                               href="#" id="dropdown-@text.Replace(" ", "-").ToLower()"
                                               role="button" data-bs-toggle="dropdown"
                                               aria-expanded="false">
                                                <i class="@icon"></i> @text
                                            </a>
                                            <ul class="dropdown-menu" aria-labelledby="dropdown-@text.Replace(" ", "-").ToLower()">
                                                @foreach (var child in childrenElement.EnumerateArray())
                                                {
                                                    string childRole = "anonymous"; // Default role
                                                    if (child.TryGetProperty("role", out var childRoleElement))
                                                    {
                                                        childRole = childRoleElement.GetString();
                                                    }

                                                    var childUrl = child.GetProperty("url").GetString().ToLower();
                                                    var childText = child.GetProperty("text").GetString();
                                                    var childIsActive = currentPath.StartsWith(childUrl, StringComparison.OrdinalIgnoreCase);

                                                    bool showChild = (childRole == "anonymous") ||
                                                    (childRole == "admin" && User.Identity.IsAuthenticated && User.IsInRole("Admin")) ||
                                                    (childRole == "user" && User.Identity.IsAuthenticated);

                                                    if (showChild)
                                                    {
                                                        <li>
                                                            <a class="dropdown-item @(childIsActive ? "active" : "")" href="@childUrl">
                                                                @childText
                                                            </a>
                                                        </li>
                                                    }
                                                }
                                            </ul>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="nav-item">
                                            <a class="nav-link @(isActive ? "active" : "")" href="@url">
                                                <i class="@icon"></i> @text
                                            </a>
                                        </li>
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            <li class="nav-item">
                                <span class="nav-link text-warning">Menu Error</span>
                            </li>
                            // Log the exception
                            // _logger.LogError(ex, "Error processing navigation menu");
                        }
                    </ul>

                    <!-- Login Partial moved to far right -->
                    <div class="ms-auto">
                        <partial name="_LoginPartial" />
                    </div>
                </div>
            </div>
        </div>
    </nav>
}
else
{
    <!-- Fallback navigation if menu items couldn't be loaded -->
    <nav aria-label="Minimal Navigation" role="navigation">
        <div class="navbar navbar-expand-lg navbar-dark bg-secondary mb-4">
            <div class="container-fluid">
                <a class="navbar-brand" href="/">ShareSmallBiz</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                        data-bs-target="#navbarNav5" aria-controls="navbarNav5"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav5">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link" href="/">Home</a>
                        </li>
                    </ul>
                    <div class="ms-auto">
                        <partial name="_LoginPartial" />
                    </div>
                </div>
            </div>
        </div>
    </nav>
}