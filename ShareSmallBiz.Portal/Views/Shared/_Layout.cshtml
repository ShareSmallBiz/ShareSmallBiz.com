@using Microsoft.AspNetCore.Identity
@using ShareSmallBiz.Portal.Data
@using System.IO
@using System.Text.Json
@using Microsoft.Extensions.Caching.Memory
@inject SignInManager<ShareSmallBizUser> SignInManager
@inject UserManager<ShareSmallBizUser> UserManager
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment
@inject Microsoft.Extensions.Caching.Memory.IMemoryCache Cache
@inject IHttpContextAccessor HttpContextAccessor

@{
    // Extract route data safely with null checks
    var area = ViewContext.RouteData.Values["area"]?.ToString() ?? string.Empty;
    var controller = ViewContext.RouteData.Values["controller"]?.ToString() ?? string.Empty;
    var action = ViewContext.RouteData.Values["action"]?.ToString() ?? string.Empty;

    // Build paths correctly
    var currentPath = $"/{area}/{controller}/{action}".ToLower();
    var currentArea = $"/{area}".ToLower();

    // Determine the JSON file path based on area
    var jsonFile = !string.IsNullOrEmpty(area)
        ? System.IO.Path.Combine(Environment.ContentRootPath, "Areas", area, "Views", "Shared", "navigation.json")
        : System.IO.Path.Combine(Environment.ContentRootPath, "Views", "Shared", "navigation.json");

    // Use caching to improve performance
    var cacheKey = $"navigation-{area}";
    JsonDocument menuItems = null;

    if (!Cache.TryGetValue(cacheKey, out menuItems))
    {
        if (File.Exists(jsonFile))
        {
            try
            {
                string json = File.ReadAllText(jsonFile);
                menuItems = JsonDocument.Parse(json);

                // Cache the navigation for 30 minutes
                var cacheOptions = new Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(30));

                Cache.Set(cacheKey, menuItems, cacheOptions);
            }
            catch (Exception ex)
            {
                // Log the error or handle it as needed
                // _logger.LogError(ex, "Error reading navigation JSON");
            }
        }
    }

    var currentYear = DateTime.UtcNow.Year.ToString();
    var request = HttpContextAccessor.HttpContext.Request;
    var canonicalUrl = $"{request.Scheme}://{request.Host}{request.Path}{request.QueryString}";
    var youtubeChannelUrl = "https://www.youtube.com/@ShareSmallBiz";
}

<!DOCTYPE html>
<html lang="en" class="h-100">
<head>
    @await Html.PartialAsync("Sections/Meta/_metatags")
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/dist/css/ShareSmallBiz.min.css" rel="stylesheet" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    @await RenderSectionAsync("Styles", required: false)
    @await RenderSectionAsync("PageStyles", required: false)
    @await RenderSectionAsync("HeadScripts", required: false)
</head>
<body class="d-flex flex-column h-100">
    <!-- Navigation -->
    <header>
        @if (menuItems != null)
        {
            <nav aria-label="Main Navigation" role="navigation" class="navbar navbar-expand-lg navbar-dark bg-secondary sticky-top">
                <div class="container-fluid px-1 px-sm-2 px-md-3">
                    <!-- Logo & Brand -->
                    <a class="navbar-brand d-flex align-items-center" href="/">
                        <img src="~/img/ShareSmallBiz.png" alt="ShareSmallBiz Logo" class="img-fluid"
                             style="height: 32px;" aria-hidden="true">
                        <span class="ms-2 d-none d-sm-inline">ShareSmallBiz</span>
                    </a>

                    <!-- Toggler Button -->
                    <button class="navbar-toggler border-0" type="button" data-bs-toggle="offcanvas"
                            data-bs-target="#mainNavOffcanvas" aria-controls="mainNavOffcanvas"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <!-- Desktop Navbar Links -->
                    <div class="collapse navbar-collapse d-none d-lg-flex" id="navbarNav">
                        <ul class="navbar-nav">
                            @try
                            {
                                @foreach (var item in menuItems.RootElement.GetProperty("menuItems").EnumerateArray())
                                {
                                    // Get menu item properties with defaults
                                    string role = "anonymous"; // Default role
                                    if (item.TryGetProperty("role", out var roleElement))
                                    {
                                        role = roleElement.GetString();
                                    }

                                    string icon = "bi bi-house-door"; // Default icon
                                    if (item.TryGetProperty("icon", out var iconElement))
                                    {
                                        icon = iconElement.GetString();
                                    }

                                    // Check if this item has children (for dropdowns)
                                    bool hasDropdown = item.TryGetProperty("children", out var childrenElement) &&
                                    childrenElement.ValueKind == JsonValueKind.Array &&
                                    childrenElement.GetArrayLength() > 0;

                                    // Get the URL and text
                                    var url = item.GetProperty("url").GetString().ToLower();
                                    var text = item.GetProperty("text").GetString();

                                    // Determine if this item is active
                                    var isActive = currentPath.StartsWith(url, StringComparison.OrdinalIgnoreCase);

                                    // Determine if we should show this menu item based on role
                                    bool shouldShow = (role == "anonymous") ||
                                    (role == "admin" && User.Identity.IsAuthenticated && User.IsInRole("Admin")) ||
                                    (role == "user" && User.Identity.IsAuthenticated);

                                    if (shouldShow)
                                    {
                                        if (hasDropdown)
                                        {
                                            <li class="nav-item dropdown">
                                                <a class="nav-link dropdown-toggle @(isActive ? "active" : "")"
                                                   href="#" id="dropdown-@text.Replace(" ", "-").ToLower()"
                                                   role="button" data-bs-toggle="dropdown"
                                                   aria-expanded="false">
                                                    <i class="@icon"></i> @text
                                                </a>
                                                <ul class="dropdown-menu" aria-labelledby="dropdown-@text.Replace(" ", "-").ToLower()">
                                                    @foreach (var child in childrenElement.EnumerateArray())
                                                    {
                                                        string childRole = "anonymous"; // Default role
                                                        if (child.TryGetProperty("role", out var childRoleElement))
                                                        {
                                                            childRole = childRoleElement.GetString();
                                                        }

                                                        var childUrl = child.GetProperty("url").GetString().ToLower();
                                                        var childText = child.GetProperty("text").GetString();
                                                        var childIsActive = currentPath.StartsWith(childUrl, StringComparison.OrdinalIgnoreCase);

                                                        bool showChild = (childRole == "anonymous") ||
                                                        (childRole == "admin" && User.Identity.IsAuthenticated && User.IsInRole("Admin")) ||
                                                        (childRole == "user" && User.Identity.IsAuthenticated);

                                                        if (showChild)
                                                        {
                                                            <li>
                                                                <a class="dropdown-item @(childIsActive ? "active" : "")" href="@childUrl">
                                                                    @childText
                                                                </a>
                                                            </li>
                                                        }
                                                    }
                                                </ul>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="nav-item">
                                                <a class="nav-link @(isActive ? "active" : "")" href="@url">
                                                    <i class="@icon"></i> <span>@text</span>
                                                </a>
                                            </li>
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                <li class="nav-item">
                                    <span class="nav-link text-warning">Menu Error</span>
                                </li>
                                // Log the exception
                                // _logger.LogError(ex, "Error processing navigation menu");
                            }
                        </ul>

                        <!-- Login Partial moved to far right -->
                        <div class="ms-auto">
                            <partial name="_LoginPartial" />
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Offcanvas Menu for Mobile -->
            <div class="offcanvas offcanvas-start bg-secondary text-white" tabindex="-1" id="mainNavOffcanvas" aria-labelledby="mainNavOffcanvasLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="mainNavOffcanvasLabel">
                        <img src="~/img/ShareSmallBiz.png" alt="ShareSmallBiz Logo" class="img-fluid me-2" style="height: 32px;">
                        ShareSmallBiz
                    </h5>
                    <button type="button" class="btn-close btn-close-white text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body p-0">
                    <div class="d-flex flex-column h-100">
                        <!-- Navigation Items -->
                        <ul class="nav flex-column">
                            @try
                            {
                                @foreach (var item in menuItems.RootElement.GetProperty("menuItems").EnumerateArray())
                                {
                                    string role = item.TryGetProperty("role", out var roleElement) ? roleElement.GetString() : "anonymous";
                                    string icon = item.TryGetProperty("icon", out var iconElement) ? iconElement.GetString() : "bi bi-house-door";

                                    bool hasDropdown = item.TryGetProperty("children", out var childrenElement) &&
                                    childrenElement.ValueKind == JsonValueKind.Array &&
                                    childrenElement.GetArrayLength() > 0;

                                    var url = item.GetProperty("url").GetString().ToLower();
                                    var text = item.GetProperty("text").GetString();
                                    var isActive = currentPath.StartsWith(url, StringComparison.OrdinalIgnoreCase);

                                    bool shouldShow = (role == "anonymous") ||
                                    (role == "admin" && User.Identity.IsAuthenticated && User.IsInRole("Admin")) ||
                                    (role == "user" && User.Identity.IsAuthenticated);

                                    if (shouldShow)
                                    {
                                        if (hasDropdown)
                                        {
                                            <li class="nav-item">
                                                <a class="nav-link text-white @(isActive ? "active fw-bold" : "")"
                                                   data-bs-toggle="collapse"
                                                   href="#collapse-@text.Replace(" ", "-").ToLower()"
                                                   role="button"
                                                   aria-expanded="false">
                                                    <i class="@icon me-2"></i>
                                                    @text
                                                    <i class="bi bi-chevron-down float-end"></i>
                                                </a>
                                                <div class="collapse" id="collapse-@text.Replace(" ", "-").ToLower()">
                                                    <ul class="nav flex-column ms-3 border-start border-light">
                                                        @foreach (var child in childrenElement.EnumerateArray())
                                                        {
                                                            string childRole = child.TryGetProperty("role", out var childRoleElement) ? childRoleElement.GetString() : "anonymous";
                                                            var childUrl = child.GetProperty("url").GetString().ToLower();
                                                            var childText = child.GetProperty("text").GetString();
                                                            var childIsActive = currentPath.StartsWith(childUrl, StringComparison.OrdinalIgnoreCase);

                                                            bool showChild = (childRole == "anonymous") ||
                                                            (childRole == "admin" && User.Identity.IsAuthenticated && User.IsInRole("Admin")) ||
                                                            (childRole == "user" && User.Identity.IsAuthenticated);

                                                            if (showChild)
                                                            {
                                                                <li class="nav-item">
                                                                    <a class="nav-link text-white @(childIsActive ? "active fw-bold" : "")" href="@childUrl">
                                                                        @childText
                                                                    </a>
                                                                </li>
                                                            }
                                                        }
                                                    </ul>
                                                </div>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="nav-item">
                                                <a class="nav-link text-white p-3 @(isActive ? "active fw-bold" : "")" href="@url">
                                                    <i class="@icon me-2"></i> @text
                                                </a>
                                            </li>
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                <li class="nav-item">
                                    <span class="nav-link text-warning p-3">Menu Error</span>
                                </li>
                            }
                        </ul>

                        <!-- Login Section at Bottom of Offcanvas -->
                        <div class="mt-auto p-3 border-top">
                            <partial name="_LoginPartial" />
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Fallback navigation if menu items couldn't be loaded -->
            <nav aria-label="Minimal Navigation" role="navigation" class="navbar navbar-expand-lg navbar-dark bg-secondary sticky-top">
                <div class="container-fluid">
                    <a class="navbar-brand" href="/">ShareSmallBiz</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas"
                            data-bs-target="#fallbackNavOffcanvas" aria-controls="fallbackNavOffcanvas"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse d-none d-lg-flex" id="navbarNav">
                        <ul class="navbar-nav">
                            <li class="nav-item">
                                <a class="nav-link" href="/">Home</a>
                            </li>
                        </ul>
                        <div class="ms-auto">
                            <partial name="_LoginPartial" />
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Fallback Offcanvas -->
            <div class="offcanvas offcanvas-start bg-secondary text-white" tabindex="-1" id="fallbackNavOffcanvas" aria-labelledby="fallbackNavOffcanvasLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="fallbackNavOffcanvasLabel">ShareSmallBiz</h5>
                    <button type="button" class="btn-close btn-close-white text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/">Home</a>
                        </li>
                    </ul>
                    <div class="mt-auto pt-3 border-top">
                        <partial name="_LoginPartial" />
                    </div>
                </div>
            </div>
        }
    </header>

    <!-- Main Container -->
    <div class="container-fluid flex-grow-1 pb-5 mb-5">
        <!-- Add padding bottom to prevent footer overlap -->
        <div class="row g-0 g-md-2 h-100">
            <!-- Left Sidebar (Collapsed on Mobile) -->
            <aside class="col-md-3 col-lg-2 order-md-1 d-none d-md-block sidebar-left">
                <div class="position-sticky top-0 pt-3">
                    @if (User.Identity.IsAuthenticated)
                    {
                        @await RenderSectionAsync("SidebarLeft", required: false)
                    }
                    else
                    {
                        @await RenderSectionAsync("SidebarLeft", required: false)
                        @await Html.PartialAsync("Sections/_whyJoin")
                    }
                </div>
            </aside>

            <!-- Main Content -->
            <main class="col-12 col-md-9 col-lg-8 order-md-2 px-2 py-3">
                @RenderBody()
            </main>

            <!-- Right Sidebar (Collapsed on Mobile) -->
            <aside class="col-lg-2 order-lg-3 d-none d-lg-block sidebar-right">
                <div class="position-sticky top-0 pt-3">
                    @if (User.Identity.IsAuthenticated)
                    {
                        @await RenderSectionAsync("SidebarRight", required: false)
                    }
                    else
                    {
                        @await RenderSectionAsync("SidebarRight", required: false)

                        <!-- Call to Action -->
                        <div class="card border-0 shadow-sm mt-3">
                            <div class="card-body text-center">
                                <h5 class="card-title">
                                    <i class="bi bi-people-fill text-primary me-2"></i>Join ShareSmallBiz
                                </h5>
                                <p class="card-text">Get started for free and collaborate with businesses worldwide.</p>
                                <a href="/Identity/Account/Login" class="btn btn-primary">
                                    Sign Up Now <i class="bi bi-arrow-right-circle ms-1"></i>
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </aside>
        </div>
    </div>

    <!-- Mobile Bottom Navigation -->
    <nav class="navbar fixed-bottom bg-light d-md-none py-3 my-4 border-top">
        <div class="container-fluid px-0">
            <div class="row w-100 g-0 text-center">
                <div class="col">
                    <button class="btn btn-secondary-soft py-2 w-100" type="button" data-bs-toggle="offcanvas" data-bs-target="#leftSidebarOffcanvas">
                        <i class="bi bi-list-fill fs-5"></i>
                        <span class="d-block small">Left</span>
                    </button>
                </div>
                <div class="col">
                    <button class="btn btn-secondary-soft py-2 w-100" type="button" data-bs-toggle="offcanvas" data-bs-target="#rightSidebarOffcanvas">
                        <i class="bi bi-list-fill fs-5"></i>
                        <span class="d-block small">Right</span>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Offcanvas Left Sidebar (Mobile) -->
    <div class="offcanvas offcanvas-start" tabindex="-1" id="leftSidebarOffcanvas">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title">
                <i class="bi bi-list text-primary me-2"></i>Left
            </h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            @if (User.Identity.IsAuthenticated)
            {
                @await RenderSectionAsync("SidebarLeft", required: false)
            }
            else
            {
                @await RenderSectionAsync("SidebarLeft", required: false)
                @await Html.PartialAsync("Sections/_whyJoin")
            }
        </div>
    </div>

    <!-- Offcanvas Right Sidebar (Mobile) -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="rightSidebarOffcanvas">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title">
                <i class="bi bi-list text-primary me-2"></i>Right
            </h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            @if (User.Identity.IsAuthenticated)
            {
                @await RenderSectionAsync("SidebarRight", required: false)
            }
            else
            {
                @await RenderSectionAsync("SidebarRight", required: false)

                <!-- Call to Action -->
                <div class="card border-0 shadow-sm mt-3">
                    <div class="card-body text-center">
                        <h5 class="card-title">
                            <i class="bi bi-people-fill text-primary me-2"></i>Join ShareSmallBiz
                        </h5>
                        <p class="card-text">Get started for free and collaborate with businesses worldwide.</p>
                        <a href="/Identity/Account/Login" class="btn btn-primary btn-lg w-100">
                            Sign Up Now <i class="bi bi-arrow-right-circle ms-1"></i>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer mt-auto fixed-bottom bg-dark text-light py-2">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <!-- Social Icons - Visible on all screens -->
                <div class="d-flex gap-2">
                    <a href="https://www.linkedin.com/company/sharesmallbiz.com/" class="btn btn-outline-light btn-sm" aria-label="LinkedIn">
                        <i class="bi bi-linkedin"></i>
                    </a>
                    <a href="@youtubeChannelUrl" class="btn btn-outline-light btn-sm" aria-label="YouTube">
                        <i class="bi bi-youtube"></i>
                    </a>
                </div>

                <!-- Copyright - Centered -->
                <div class="d-none d-sm-block">
                    <small>&copy; 2023-@currentYear <a href="https://sharesmallbiz.com" class="text-light text-decoration-none">ShareSmallBiz.com</a></small>
                </div>

                <!-- Expandable Links Button -->
                <div>
                    <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#footerDetails" aria-expanded="false" aria-label="Toggle footer details">
                        <span class="d-none d-sm-inline">More</span> <i class="bi bi-chevron-up"></i>
                    </button>
                </div>
            </div>

            <!-- Collapsible Footer Details -->
            <div class="collapse" id="footerDetails">
                <div class="d-flex flex-column flex-sm-row justify-content-center align-items-center gap-2 mt-2">
                    <a href="/home/privacy" class="text-decoration-none small text-light">Privacy Policy</a>
                    <span class="d-none d-sm-inline text-light">•</span>
                    <a href="/home/terms" class="text-decoration-none small text-light">Terms & Conditions</a>
                    <span class="d-none d-sm-inline text-light">•</span>
                    <span class="small text-light">Version 1.0.0</span>
                </div>
            </div>
        </div>
    </footer>

    @await Html.PartialAsync("Sections/Footer/_footer_scripts")
    @await RenderSectionAsync("Scripts", required: false)
    @await RenderSectionAsync("PageScripts", required: false)
</body>
</html>