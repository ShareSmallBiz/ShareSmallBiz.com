@model DiscussionModel
@using Microsoft.AspNetCore.Identity
@using ShareSmallBiz.Portal.Infrastructure.Models
@inject SignInManager<ShareSmallBizUser> SignInManager
@inject UserManager<ShareSmallBizUser> UserManager

@{
    ViewData["Title"] = Model.Title;
    var currentUserId = UserManager.GetUserId(User);
    var currentUserName = User.Identity.IsAuthenticated ? User.Identity.Name : "";
}

<article class="container-fluid px-md-4" itemscope itemtype="http://schema.org/Article">
    <meta itemprop="headline" content="@Model.Title" />
    <div class="row">
        <div class="col-lg-10 col-xl-8 mx-auto">
            <!-- Cover Image -->
            @if (!string.IsNullOrEmpty(Model.Cover) && Model.Cover != "https://sharesmallbiz.com/")
            {
                <figure class="mb-3 text-center">
                    <img src="@Model.Cover"
                         class="img-fluid rounded shadow-sm lazyload"
                         alt="@Model.Title"
                         loading="lazy"
                         style="max-height: 50vh; object-fit: cover; width: 100%;"
                         itemprop="image" />
                </figure>
            }
            <h1 class="fw-bold mb-3">@Model.Title</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-10 col-xl-8 mx-auto">
            <div class="d-flex flex-wrap align-items-center justify-content-center mb-3">
                <div class="d-flex align-items-center me-3 mb-2 mb-md-0">
                    @if (Model?.Author?.ProfilePicture != null)
                    {
                        <img class="rounded-circle me-2" style="width: 40px; height: 40px; object-fit: cover;"
                             src="data:image/*;base64,@(Convert.ToBase64String(Model.Author.ProfilePicture))" alt="@Model.Author.UserName's profile" />
                    }
                    else
                    {
                        <i class="bi bi-person-circle fs-4 me-2"></i>
                    }
                    <span itemprop="author" itemscope itemtype="http://schema.org/Person">
                        <meta itemprop="name" content="@(Model?.Author?.UserName ?? "Unknown Author")" />
                        <strong>
                            @if (!string.IsNullOrEmpty(Model?.Author?.UserName))
                            {
                                <a href="/profiles/@Model.Author.UserName" class="text-decoration-none" itemprop="url">
                                    @(Model.Author.UserName)
                                </a>
                            }
                            else
                            {
                                @:Unknown Author
                            }
                        </strong>
                    </span>
                </div>
                <div class="d-flex align-items-center me-3 mb-2 mb-md-0">
                    <i class="bi bi-eye me-1"></i> <span itemprop="interactionCount">@(Model.PostViews) views</span>
                </div>
                <div class="d-flex align-items-center mb-2 mb-md-0">
                    <i class="bi bi-calendar me-1"></i>
                    <time datetime="@Model.Published.ToString("yyyy-MM-dd")" itemprop="datePublished">
                        @Model.Published.ToString("MMM d, yyyy")
                    </time>
                </div>
            </div>

            <div class="d-flex flex-wrap justify-content-center gap-2 mb-3">
                @foreach (var tag in Model.Tags)
                {
                    <a class="btn btn-sm btn-info" href="/discussions/tag/@tag">#@tag</a>
                }
            </div>

            <!-- Edit Post Link (Only for Author) -->
            @if (SignInManager.IsSignedIn(User) && Model.Author.Id == currentUserId)
            {
                <div class="text-end mb-3">
                    <a href="/Forum/Post/Edit/@Model.Id" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-pencil"></i> Edit Post
                    </a>
                </div>
            }
        </div>
    </div>

    <!-- Post Content -->
    <div class="row">
        <div class="col-lg-10 col-xl-8 mx-auto">
            <hr class="my-4" />

            <div class="post-content mb-5" itemprop="articleBody">
                @Html.Raw(Model.Content)
            </div>

            <!-- Comments Section -->
            <div class="card shadow-sm border-0 mb-5">
                <div class="card-header bg-light">
                    <i class="bi bi-chat-dots me-2"></i> Comments
                </div>
                <div class="card-body">
                    <div id="commentsList" class="list-group list-group-flush">
                        @Html.Partial("_CommentsPartial", Model.Comments)
                    </div>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <div id="addCommentSection" class="mt-4">
                            <div class="mb-3">
                                <textarea id="newCommentText" class="form-control" rows="3" placeholder="Add a comment"></textarea>
                            </div>
                            <button id="addCommentButton" data-post-id="@Model.Id" class="btn btn-primary">
                                <i class="bi bi-plus-lg me-1"></i> Add Comment
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center mt-4">
                            <p class="mb-2"><strong>Want to join the conversation?</strong></p>
                            <div class="d-flex justify-content-center gap-2 flex-wrap">
                                <a href="/Identity/Account/Login" class="btn btn-primary">
                                    <i class="bi bi-box-arrow-in-right me-1"></i> Log In
                                </a>
                                <span class="d-flex align-items-center">or</span>
                                <a href="/Identity/Account/Register" class="btn btn-success">
                                    <i class="bi bi-person-plus-fill me-1"></i> Sign Up
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-10 col-xl-8 mx-auto">
            <div class="text-center">
                <hr class="my-5" />
            </div>
        </div>
    </div>
</article>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const currentUserName = '@currentUserName';
            const postId = @Model.Id;

            // Handler for adding a comment
            const addCommentButton = document.getElementById("addCommentButton");
            if (addCommentButton) {
                addCommentButton.addEventListener("click", function() {
                    const commentText = document.getElementById("newCommentText").value;
                    if (!commentText.trim()) return; // Prevent empty comments

                    fetch('/discussions/' + postId + '/comment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: 'comment=' + encodeURIComponent(commentText)
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.text();
                    })
                    .then(html => {
                        document.getElementById("commentsList").innerHTML = html;
                        document.getElementById("newCommentText").value = '';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert("Error adding comment.");
                    });
                });
            }

            // Delegate click event for deleting a comment
            const commentsList = document.getElementById("commentsList");
            if (commentsList) {
                commentsList.addEventListener("click", function(event) {
                    const target = event.target.closest(".delete-comment");
                    if (!target) return;

                    event.preventDefault();
                    const commentId = target.dataset.commentId;

                    if (confirm("Are you sure you want to delete this comment?")) {
                        fetch('/discussions/' + postId + '/comment/' + commentId, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Network response was not ok');
                            return response.text();
                        })
                        .then(html => {
                            document.getElementById("commentsList").innerHTML = html;
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert("Error deleting comment.");
                        });
                    }
                });
            }
        });
    </script>
}