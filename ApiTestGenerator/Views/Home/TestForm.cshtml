@model ApiTestGenerator.Models.ApiTestViewModel

@{
    ViewData["Title"] = "API Test Form";
}

<h1>API Test Form</h1>

<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                <h5>API Test</h5>
            </div>
            <div class="card-body">
                <form asp-action="ExecuteTest" method="post">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Server</label>
                                <select asp-for="SelectedServer" class="form-control" id="server-select">
                                    @if (Model.ApiDefinition?.Servers != null)
                                    {
                                        @foreach (var server in Model.ApiDefinition.Servers)
                                        {
                                            <option value="@server.Value.Url">@server.Value.Url - @server.Value.Description</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div class="form-group">
                                <label>Path</label>
                                <select asp-for="SelectedPath" class="form-control" id="path-select">
                                    <option value="">Select a path</option>
                                    @if (Model.ApiDefinition?.Paths != null)
                                    {
                                        @foreach (var path in Model.ApiDefinition.Paths)
                                        {
                                            <option value="@path.Key">@path.Key</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>Method</label>
                                <select asp-for="SelectedMethod" class="form-control" id="method-select">
                                    <option value="">Select a method</option>
                                    <option value="GET">GET</option>
                                    <option value="POST">POST</option>
                                    <option value="PUT">PUT</option>
                                    <option value="DELETE">DELETE</option>
                                    <option value="PATCH">PATCH</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div id="parameters-container">
                        <!-- Path Parameters -->
                        <div id="path-parameters" class="parameters-section mb-3">
                            <h5>Path Parameters</h5>
                            <div id="path-params-fields">
                                @if (Model.PathParameters != null)
                                {
                                    @foreach (var param in Model.PathParameters)
                                    {
                                        <div class="row mb-2">
                                            <div class="col-md-4">
                                                <input type="text" class="form-control" value="@param.Key" readonly />
                                            </div>
                                            <div class="col-md-8">
                                                <input type="text" name="PathParameters[@param.Key]" class="form-control" value="@param.Value" />
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>

                        <!-- Query Parameters -->
                        <div id="query-parameters" class="parameters-section mb-3">
                            <h5>Query Parameters</h5>
                            <div id="query-params-fields">
                                @if (Model.QueryParameters != null)
                                {
                                    @foreach (var param in Model.QueryParameters)
                                    {
                                        <div class="row mb-2">
                                            <div class="col-md-4">
                                                <input type="text" class="form-control" value="@param.Key" readonly />
                                            </div>
                                            <div class="col-md-8">
                                                <input type="text" name="QueryParameters[@param.Key]" class="form-control" value="@param.Value" />
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" id="add-query-param">Add Query Parameter</button>
                        </div>

                        <!-- Headers -->
                        <div id="headers" class="parameters-section mb-3">
                            <h5>Headers</h5>
                            <div id="headers-fields">
                                @if (Model.Headers != null)
                                {
                                    @foreach (var header in Model.Headers)
                                    {
                                        <div class="row mb-2">
                                            <div class="col-md-4">
                                                <input type="text" name="Headers.Keys" class="form-control" value="@header.Key" />
                                            </div>
                                            <div class="col-md-8">
                                                <input type="text" name="Headers[@header.Key]" class="form-control" value="@header.Value" />
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" id="add-header">Add Header</button>
                        </div>

                        <!-- Request Body -->
                        <div id="request-body" class="parameters-section mb-3">
                            <h5>Request Body</h5>
                            <div class="form-group">
                                <textarea asp-for="RequestBody" class="form-control" rows="10" id="request-body-textarea"></textarea>
                            </div>
                        </div>
                    </div>

                    <!-- Save Test Form -->
                    <div class="mb-3">
                        <div class="row">
                            <div class="col-md-8">
                                <input type="text" asp-for="SavedTestName" class="form-control" placeholder="Test Name" />
                            </div>
                            <div class="col-md-4">
                                <button type="submit" formaction="@Url.Action("SaveTest")" class="btn btn-success">Save Test</button>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Execute Test</button>
                </form>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.ApiResponse))
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Response</h5>
                    <span class="badge @(Model.ApiResponseStatus?.StartsWith("2") == true ? "bg-success" : "bg-danger")">@Model.ApiResponseStatus</span>
                </div>
                <div class="card-body">
                    <pre><code id="response-content">@Model.ApiResponse</code></pre>
                </div>
            </div>
        }
    </div>

    <div class="col-md-4">
        @if (Model.SavedTests.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Saved Tests</h5>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        @foreach (var test in Model.SavedTests)
                        {
                            <div class="list-group-item">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@test.Name</h6>
                                    <small class="text-muted">@test.Method</small>
                                </div>
                                <p class="mb-1 small">@test.Path</p>
                                <div class="btn-group btn-group-sm">
                                    <a href="@Url.Action("LoadTest", new { id = test.Id })" class="btn btn-outline-primary">Load</a>
                                    <form asp-action="DeleteTest" method="post" style="display: inline;">
                                        <input type="hidden" name="id" value="@test.Id" />
                                        <button type="submit" class="btn btn-outline-danger" onclick="return confirm('Are you sure you want to delete this test?')">Delete</button>
                                    </form>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <div class="card">
            <div class="card-header">
                <h5>API Documentation</h5>
            </div>
            <div class="card-body">
                <div id="api-doc">
                    <p>Select a path and method to see the documentation</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Format JSON in response
        function formatJson() {
            const responseContent = document.getElementById('response-content');
            if (responseContent) {
                try {
                    const json = JSON.parse(responseContent.textContent);
                    responseContent.textContent = JSON.stringify(json, null, 2);
                } catch (e) {
                    // Not JSON, leave as is
                }
            }
        }

        // On page load
        document.addEventListener('DOMContentLoaded', function() {
            formatJson();

            // Add query parameter button
            document.getElementById('add-query-param').addEventListener('click', function() {
                const container = document.getElementById('query-params-fields');
                const row = document.createElement('div');
                row.className = 'row mb-2';
                row.innerHTML = `
                    <div class="col-md-4">
                        <input type="text" name="QueryParameters.Keys" class="form-control" placeholder="Name" />
                    </div>
                    <div class="col-md-8">
                        <div class="input-group">
                            <input type="text" name="QueryParameters[temp]" class="form-control" placeholder="Value" />
                            <button type="button" class="btn btn-outline-danger remove-param">×</button>
                        </div>
                    </div>
                `;
                container.appendChild(row);

                // Fix the name attribute after the element is added to DOM
                const nameInput = row.querySelector('input[name="QueryParameters.Keys"]');
                const valueInput = row.querySelector('input[name="QueryParameters[temp]"]');

                nameInput.addEventListener('change', function() {
                    valueInput.name = `QueryParameters[${nameInput.value}]`;
                });

                // Remove button
                row.querySelector('.remove-param').addEventListener('click', function() {
                    row.remove();
                });
            });

            // Add header button
            document.getElementById('add-header').addEventListener('click', function() {
                const container = document.getElementById('headers-fields');
                const row = document.createElement('div');
                row.className = 'row mb-2';
                row.innerHTML = `
                    <div class="col-md-4">
                        <input type="text" name="Headers.Keys" class="form-control" placeholder="Name" />
                    </div>
                    <div class="col-md-8">
                        <div class="input-group">
                            <input type="text" name="Headers[temp]" class="form-control" placeholder="Value" />
                            <button type="button" class="btn btn-outline-danger remove-param">×</button>
                        </div>
                    </div>
                `;
                container.appendChild(row);

                // Fix the name attribute after the element is added to DOM
                const nameInput = row.querySelector('input[name="Headers.Keys"]');
                const valueInput = row.querySelector('input[name="Headers[temp]"]');

                nameInput.addEventListener('change', function() {
                    valueInput.name = `Headers[${nameInput.value}]`;
                });

                // Remove button
                row.querySelector('.remove-param').addEventListener('click', function() {
                    row.remove();
                });
            });

            // Path and method change events
            const pathSelect = document.getElementById('path-select');
            const methodSelect = document.getElementById('method-select');

            if (pathSelect && methodSelect) {
                pathSelect.addEventListener('change', updateParameters);
                methodSelect.addEventListener('change', updateParameters);
            }

            function updateParameters() {
                const path = pathSelect.value;
                const method = methodSelect.value.toLowerCase();

                if (!path || !method) return;

                // Get API definition from a hidden field or fetch from server
                const apiDefinition = @Html.Raw(Json.Serialize(Model.ApiDefinition));

                if (!apiDefinition || !apiDefinition.paths || !apiDefinition.paths[path]) return;

                const pathItem = apiDefinition.paths[path];
                const operation = pathItem[method];

                if (!operation) {
                    alert(`Method ${method.toUpperCase()} not available for this path`);
                    methodSelect.value = '';
                    return;
                }

                // Update path parameters
                const pathParamsContainer = document.getElementById('path-params-fields');
                pathParamsContainer.innerHTML = '';

                if (operation.parameters) {
                    const pathParams = operation.parameters.filter(p => p.in === 'path');

                    pathParams.forEach(param => {
                        const row = document.createElement('div');
                        row.className = 'row mb-2';
                        row.innerHTML = `
                            <div class="col-md-4">
                                <input type="text" class="form-control" value="${param.name}" readonly />
                            </div>
                            <div class="col-md-8">
                                <input type="text" name="PathParameters[${param.name}]" class="form-control" placeholder="${param.required ? 'Required' : 'Optional'}" />
                            </div>
                        `;
                        pathParamsContainer.appendChild(row);
                    });
                }

                // Update query parameters
                const queryParamsContainer = document.getElementById('query-params-fields');
                queryParamsContainer.innerHTML = '';

                if (operation.parameters) {
                    const queryParams = operation.parameters.filter(p => p.in === 'query');

                    queryParams.forEach(param => {
                        const row = document.createElement('div');
                        row.className = 'row mb-2';
                        row.innerHTML = `
                            <div class="col-md-4">
                                <input type="text" class="form-control" value="${param.name}" readonly />
                            </div>
                            <div class="col-md-8">
                                <input type="text" name="QueryParameters[${param.name}]" class="form-control" placeholder="${param.required ? 'Required' : 'Optional'}" />
                            </div>
                        `;
                        queryParamsContainer.appendChild(row);
                    });
                }

                // Update request body
                const requestBodyContainer = document.getElementById('request-body');
                const requestBodyTextarea = document.getElementById('request-body-textarea');

                if (operation.requestBody && ['post', 'put', 'patch'].includes(method)) {
                    requestBodyContainer.style.display = 'block';

                    // Generate a sample request body based on the schema
                    if (operation.requestBody.content && operation.requestBody.content['application/json'] && operation.requestBody.content['application/json'].schema) {
                        const schema = operation.requestBody.content['application/json'].schema;
                        const sampleJson = generateSampleFromSchema(schema, apiDefinition);
                        requestBodyTextarea.value = JSON.stringify(sampleJson, null, 2);
                    } else {
                        requestBodyTextarea.value = '{}';
                    }
                } else {
                    requestBodyContainer.style.display = 'none';
                    requestBodyTextarea.value = '';
                }

                // Update API documentation
                const apiDocContainer = document.getElementById('api-doc');
                apiDocContainer.innerHTML = '';

                const docContent = document.createElement('div');

                // Operation details
                if (operation.summary || operation.description) {
                    const summary = document.createElement('h6');
                    summary.textContent = operation.summary || path;
                    docContent.appendChild(summary);

                    if (operation.description) {
                        const description = document.createElement('p');
                        description.textContent = operation.description;
                        docContent.appendChild(description);
                    }
                }

                // Parameters
                if (operation.parameters && operation.parameters.length > 0) {
                    const paramsTitle = document.createElement('h6');
                    paramsTitle.textContent = 'Parameters';
                    paramsTitle.className = 'mt-3';
                    docContent.appendChild(paramsTitle);

                    const paramsList = document.createElement('ul');
                    paramsList.className = 'list-group';

                    operation.parameters.forEach(param => {
                        const paramItem = document.createElement('li');
                        paramItem.className = 'list-group-item';

                        const paramName = document.createElement('strong');
                        paramName.textContent = param.name;

                        const paramDetails = document.createElement('div');
                        paramDetails.className = 'small';
                        paramDetails.innerHTML = `
                            <span class="badge bg-secondary">${param.in}</span>
                            ${param.required ? '<span class="badge bg-danger">required</span>' : ''}
                            ${param.description ? `<p class="mt-1 mb-0">${param.description}</p>` : ''}
                        `;

                        paramItem.appendChild(paramName);
                        paramItem.appendChild(paramDetails);
                        paramsList.appendChild(paramItem);
                    });

                    docContent.appendChild(paramsList);
                }

                // Request body
                if (operation.requestBody) {
                    const requestBodyTitle = document.createElement('h6');
                    requestBodyTitle.textContent = 'Request Body';
                    requestBodyTitle.className = 'mt-3';
                    docContent.appendChild(requestBodyTitle);

                    const requestBodyDetails = document.createElement('div');
                    requestBodyDetails.className = 'small';
                    requestBodyDetails.innerHTML = `
                        ${operation.requestBody.required ? '<span class="badge bg-danger">required</span>' : ''}
                        ${operation.requestBody.description ? `<p class="mt-1 mb-0">${operation.requestBody.description}</p>` : ''}
                    `;

                    docContent.appendChild(requestBodyDetails);
                }

                // Responses
                if (operation.responses && Object.keys(operation.responses).length > 0) {
                    const responsesTitle = document.createElement('h6');
                    responsesTitle.textContent = 'Responses';
                    responsesTitle.className = 'mt-3';
                    docContent.appendChild(responsesTitle);

                    const responsesList = document.createElement('ul');
                    responsesList.className = 'list-group';

                    for (const [code, response] of Object.entries(operation.responses)) {
                        const responseItem = document.createElement('li');
                        responseItem.className = 'list-group-item';

                        const responseCode = document.createElement('strong');
                        responseCode.textContent = code;

                        const responseDetails = document.createElement('div');
                        responseDetails.className = 'small';
                        responseDetails.innerHTML = `
                            <p class="mt-1 mb-0">${response.description || ''}</p>
                        `;

                        responseItem.appendChild(responseCode);
                        responseItem.appendChild(responseDetails);
                        responsesList.appendChild(responseItem);
                    }

                    docContent.appendChild(responsesList);
                }

                apiDocContainer.appendChild(docContent);
            }

            // Generate sample data from schema
            function generateSampleFromSchema(schema, apiDefinition) {
                // Handle $ref
                if (schema.reference) {
                    const refPath = schema.reference;
                    const refName = refPath.split('/').pop();

                    if (apiDefinition.components && apiDefinition.components.schemas && apiDefinition.components.schemas[refName]) {
                        return generateSampleFromSchema(apiDefinition.components.schemas[refName], apiDefinition);
                    }

                    return { $ref: refPath };
                }

                // Handle oneOf, anyOf, allOf
                if (schema.oneOf && schema.oneOf.length > 0) {
                    return generateSampleFromSchema(schema.oneOf[0], apiDefinition);
                }

                if (schema.anyOf && schema.anyOf.length > 0) {
                    return generateSampleFromSchema(schema.anyOf[0], apiDefinition);
                }

                if (schema.allOf && schema.allOf.length > 0) {
                    let result = {};
                    for (const subSchema of schema.allOf) {
                        Object.assign(result, generateSampleFromSchema(subSchema, apiDefinition));
                    }
                    return result;
                }

                // Handle different types
                switch(schema.type) {
                    case 'object':
                        const obj = {};
                        if (schema.properties) {
                            for (const [propName, propSchema] of Object.entries(schema.properties)) {
                                obj[propName] = generateSampleFromSchema(propSchema, apiDefinition);
                            }
                        }
                        return obj;

                    case 'array':
                        if (schema.items) {
                            return [generateSampleFromSchema(schema.items, apiDefinition)];
                        }
                        return [];

                    case 'string':
                        if (schema.example) return schema.example;
                        if (schema.format === 'date-time') return new Date().toISOString();
                        if (schema.format === 'date') return new Date().toISOString().split('T')[0];
                        if (schema.format === 'email') return 'user@example.com';
                        if (schema.format === 'uuid') return '00000000-0000-0000-0000-000000000000';
                        return 'string';

                    case 'number':
                    case 'integer':
                        if (schema.example) return schema.example;
                        return 0;

                    case 'boolean':
                        if (schema.example) return schema.example;
                        return false;

                    case 'null':
                        return null;

                    default:
                        return {};
                }
            }

            // Initialize parameters if path and method are already selected
            if (pathSelect.value && methodSelect.value) {
                updateParameters();
            }
        });
    </script>
}
